---------------------------------------------------
-- Sheet: backuphsynch
-- RefDes: 
-- Part Number: XC7A35T
-- Generated By: Multisim
--
-- Author: wa18382
-- Date: Thursday, November 28 15:16:35, 2019
---------------------------------------------------

---------------------------------------------------
-- Use: This file defines the top-level of the design
-- Use with the exported package file
---------------------------------------------------
library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;

library work;
use work.vsynchtest1_pkg.ALL;


entity backuphsynch is
	port (

		HsynchPulse : out std_logic;
		CLK : in std_logic;
		VsynchPulse : out std_logic
	);
end backuphsynch;


architecture behavioral of backuphsynch is


	component AND2_NI
		port (
    B : in STD_LOGIC := 'X';
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
	end component;

	component AND3_NI
		port (
    C : in STD_LOGIC := 'X';
    B : in STD_LOGIC := 'X';
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
	end component;

	component AND4_NI
		port (
    D : in STD_LOGIC := 'X';
    C : in STD_LOGIC := 'X';
    B : in STD_LOGIC := 'X';
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
	end component;

	component AUTO_IBUF
		port(
		I : in std_logic;
		O : out std_logic
	);
	end component;

	component AUTO_OBUF
		port(
		I : in std_logic;
		O : out std_logic
	);
	end component;

	component CNTR_4BIN_S_NI
		port( 
  LOAD: in STD_LOGIC;
  CLR: in STD_LOGIC;
  ENP: in STD_LOGIC; 
  ENT: in STD_LOGIC;
  CLK: in STD_LOGIC;
  A :in STD_LOGIC;
  B :in STD_LOGIC;
  C :in STD_LOGIC;
  D :in STD_LOGIC;
  RCO : out STD_LOGIC;
  QA : out STD_LOGIC;
  QB : out STD_LOGIC;
  QC : out STD_LOGIC;
  QD : out STD_LOGIC
 );
	end component;

	component CNTR_BCD_S_NI
		port( 
  LOAD: in std_logic;
  CLR: in std_logic;
  ENP: in std_logic; 
  ENT: in std_logic;
  CLK: in std_logic;
  A:in STD_LOGIC;
  B:in STD_LOGIC;
  C:in STD_LOGIC;
  D:in STD_LOGIC;
  RCO: out STD_LOGIC;
  QA: out STD_LOGIC;
  QB: out STD_LOGIC;
  QC: out STD_LOGIC;
  QD: out STD_LOGIC
 );
	end component;

	component DIGITAL_HIGH_NI
		Port ( 
  Y : out  STD_LOGIC:='1'
 );
	end component;

	component FF_JK_NSCLR_CO_NI
		port (
   J: in STD_LOGIC;
    K: in STD_LOGIC;
    CLK : in STD_LOGIC;  
    PR: in STD_LOGIC;
    CLR: in STD_LOGIC;
    Q : out STD_LOGIC;
    Qneg : out STD_LOGIC
  );
	end component;

	component FF_T_CLR_CO_NI
		port (
    T: in STD_LOGIC;
    CLK : in STD_LOGIC;
    CLR : in STD_LOGIC;
     Q : out STD_LOGIC;
     Qneg : out STD_LOGIC
 );
	end component;

	component INV_NI
		port (
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
	end component;
	signal \1\ : std_logic;
	signal \PLD1/Pixelclock\ : std_logic;
	signal \PLD3/Pixelclock\ : std_logic;
	signal \17\ : std_logic;
	signal \15\ : std_logic;
	signal \PLD3/bit0\ : std_logic;
	signal \PLD1/bit9\ : std_logic;
	signal \PLD1/bit5\ : std_logic;
	signal \PLD3/bit1\ : std_logic;
	signal \19\ : std_logic;
	signal \PLD3/bit3\ : std_logic;
	signal \PLD1/bit2\ : std_logic;
	signal \PLD3/bit2\ : std_logic;
	signal \PLD3/bit4\ : std_logic;
	signal \22\ : std_logic;
	signal \PLD3/bit6\ : std_logic;
	signal \PLD1/bit0\ : std_logic;
	signal \PLD3/bit5\ : std_logic;
	signal \PLD3/bit7\ : std_logic;
	signal \PLD3/bit9\ : std_logic;
	signal \5\ : std_logic;
	signal \14\ : std_logic;
	signal \PLD1/bit1\ : std_logic;
	signal \PLD1/bit6\ : std_logic;
	signal \PLD3/bit8\ : std_logic;
	signal \PLD1/bit3\ : std_logic;
	signal \PLD3/bit10\ : std_logic;
	signal \24\ : std_logic;
	signal \PLD3/bit11\ : std_logic;
	signal \PLD3/reset\ : std_logic;
	signal \PLD1/bit4\ : std_logic;
	signal \PLD2/CLOCK_C\ : std_logic;
	signal \PLD1/bit7\ : std_logic;
	signal \23\ : std_logic;
	signal \PLD2/CLOCK_B\ : std_logic;
	signal \PLD2/CLK\ : std_logic;
	signal \PLD1/bit8\ : std_logic;
	signal \PLD1/bit11\ : std_logic;
	signal \21\ : std_logic;
	signal \PLD1/reset\ : std_logic;
	signal \PLD1/bit10\ : std_logic;
	signal \18\ : std_logic;
	signal \16\ : std_logic;
	signal \28\ : std_logic;
	signal \2\ : std_logic;
	signal \13\ : std_logic;
	signal \6\ : std_logic;
	signal \10\ : std_logic;
	signal \8\ : std_logic;
	signal \11\ : std_logic;
	signal \9\ : std_logic;
	signal \12\ : std_logic;
	signal \7\ : std_logic;
	signal \4\ : std_logic;
	signal \3\ : std_logic;
	signal \26\ : std_logic;
	signal \25\ : std_logic;
	signal \30\ : std_logic;
	signal \20\ : std_logic;
	signal \31\ : std_logic;
	signal \35\ : std_logic;
	signal \36\ : std_logic;
	signal \38\ : std_logic;
	signal \39\ : std_logic;
	signal \41\ : std_logic;
	signal \42\ : std_logic;
	signal \29\ : std_logic;
	signal \32\ : std_logic;
	signal \33\ : std_logic;
	signal \34\ : std_logic;
	signal \62\ : std_logic;
	signal \63\ : std_logic;
	signal \95\ : std_logic;
begin
	HsynchPulse_AUTOBUF : AUTO_OBUF
		port map( I => \PLD3/Pixelclock\, O => HsynchPulse );
	CLK_AUTOBUF : AUTO_IBUF
		port map( I => CLK, O => \PLD2/CLK\ );
	VsynchPulse_AUTOBUF : AUTO_OBUF
		port map( I => \24\, O => VsynchPulse );
	U2 : AND4_NI
		port map( A => \PLD1/bit0\, B => \PLD1/bit1\, C => \PLD1/bit2\, D => \PLD1/bit3\, Y => \62\ );
	U3 : INV_NI
		port map( Y => \63\, A => \PLD1/bit5\ );
	U4 : INV_NI
		port map( Y => \14\, A => \PLD1/bit6\ );
	U5 : INV_NI
		port map( Y => \15\, A => \PLD1/bit7\ );
	U21 : AND4_NI
		port map( A => \PLD1/bit4\, B => \63\, C => \15\, D => \14\, Y => \16\ );
	U22 : AND4_NI
		port map( A => \62\, B => \16\, C => \PLD1/bit8\, D => \PLD1/bit9\, Y => \17\ );
	U23 : INV_NI
		port map( Y => \PLD1/reset\, A => \17\ );
	U24 : AND4_NI
		port map( A => \PLD1/bit0\, B => \PLD1/bit1\, C => \PLD1/bit2\, D => \PLD1/bit3\, Y => \18\ );
	U26 : INV_NI
		port map( Y => \19\, A => \PLD1/bit5\ );
	U28 : AND2_NI
		port map( A => \18\, B => \95\, Y => \21\ );
	U27 : AND3_NI
		port map( A => \PLD1/bit4\, B => \19\, C => \PLD1/bit6\, Y => \95\ );
	U29 : FF_JK_NSCLR_CO_NI
		port map( Q => \PLD3/Pixelclock\, Qneg => open, PR => \22\, K => \17\, CLR => \22\, J => \21\, CLK => \PLD1/Pixelclock\ );
	U25 : DIGITAL_HIGH_NI
		port map( Y => \22\ );
	U34 : INV_NI
		port map( Y => \42\, A => \PLD3/bit0\ );
	U35 : INV_NI
		port map( Y => \39\, A => \PLD3/bit1\ );
	U36 : INV_NI
		port map( Y => \29\, A => \PLD3/bit2\ );
	U37 : AND4_NI
		port map( A => \42\, B => \39\, C => \PLD3/bit3\, D => \29\, Y => \30\ );
	U38 : INV_NI
		port map( Y => \31\, A => \PLD3/bit5\ );
	U39 : INV_NI
		port map( Y => \32\, A => \PLD3/bit7\ );
	U40 : INV_NI
		port map( Y => \33\, A => \PLD3/bit8\ );
	U41 : INV_NI
		port map( Y => \34\, A => \PLD3/bit4\ );
	U42 : INV_NI
		port map( Y => \35\, A => \PLD3/bit6\ );
	U43 : AND4_NI
		port map( A => \34\, B => \31\, C => \35\, D => \32\, Y => \36\ );
	U44 : AND2_NI
		port map( A => \PLD3/bit9\, B => \33\, Y => \38\ );
	U45 : AND3_NI
		port map( A => \30\, B => \36\, C => \38\, Y => \28\ );
	U49 : INV_NI
		port map( Y => \PLD3/reset\, A => \28\ );
	U46 : AND2_NI
		port map( A => \PLD3/bit0\, B => \23\, Y => \41\ );
	U47 : INV_NI
		port map( Y => \23\, A => \PLD3/bit1\ );
	U50 : FF_JK_NSCLR_CO_NI
		port map( Q => \24\, Qneg => open, PR => \5\, K => \28\, CLR => \5\, J => \41\, CLK => \PLD3/Pixelclock\ );
	U48 : DIGITAL_HIGH_NI
		port map( Y => \5\ );
	U6 : DIGITAL_HIGH_NI
		port map( Y => \2\ );
	U7 : CNTR_4BIN_S_NI
		port map( QA => open, QB => \PLD1/Pixelclock\, QC => open, QD => open, RCO => open, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \2\, LOAD => \2\, CLR => \2\, CLK => \PLD2/CLK\ );
	U8 : CNTR_BCD_S_NI
		port map( QA => open, QB => open, QC => open, QD => open, RCO => \6\, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \2\, LOAD => \2\, CLR => \2\, CLK => \PLD2/CLK\ );
	U9 : FF_T_CLR_CO_NI
		port map( T => \2\, Q => \PLD2/CLOCK_B\, Qneg => open, CLR => \2\, CLK => \10\ );
	U10 : CNTR_BCD_S_NI
		port map( QA => open, QB => open, QC => open, QD => open, RCO => \7\, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \2\, LOAD => \2\, CLR => \2\, CLK => \6\ );
	U11 : CNTR_BCD_S_NI
		port map( QA => open, QB => open, QC => open, QD => open, RCO => \8\, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \2\, LOAD => \2\, CLR => \2\, CLK => \7\ );
	U12 : CNTR_BCD_S_NI
		port map( QA => open, QB => open, QC => open, QD => open, RCO => \9\, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \2\, LOAD => \2\, CLR => \2\, CLK => \8\ );
	U13 : CNTR_BCD_S_NI
		port map( QA => open, QB => open, QC => open, QD => open, RCO => \10\, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \2\, LOAD => \2\, CLR => \2\, CLK => \9\ );
	U14 : CNTR_BCD_S_NI
		port map( QA => open, QB => open, QC => open, QD => open, RCO => \11\, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \2\, LOAD => \2\, CLR => \2\, CLK => \10\ );
	U15 : CNTR_BCD_S_NI
		port map( QA => open, QB => open, QC => open, QD => open, RCO => \12\, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \2\, LOAD => \2\, CLR => \2\, CLK => \11\ );
	U19 : CNTR_BCD_S_NI
		port map( QA => open, QB => open, QC => open, QD => open, RCO => \13\, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \2\, LOAD => \2\, CLR => \2\, CLK => \12\ );
	U20 : FF_T_CLR_CO_NI
		port map( T => \2\, Q => \PLD2/CLOCK_C\, Qneg => open, CLR => \2\, CLK => \13\ );
	U16 : CNTR_4BIN_S_NI
		port map( QA => \PLD1/bit0\, QB => \PLD1/bit1\, QC => \PLD1/bit2\, QD => \PLD1/bit3\, RCO => \1\, A => \3\, B => \3\, C => \3\, D => \3\, ENP => \3\, ENT => \3\, LOAD => \3\, CLR => \PLD1/reset\, CLK => \PLD1/Pixelclock\ );
	U17 : CNTR_4BIN_S_NI
		port map( QA => \PLD1/bit4\, QB => \PLD1/bit5\, QC => \PLD1/bit6\, QD => \PLD1/bit7\, RCO => \4\, A => \3\, B => \3\, C => \3\, D => \3\, ENP => \3\, ENT => \1\, LOAD => \3\, CLR => \PLD1/reset\, CLK => \PLD1/Pixelclock\ );
	U18 : CNTR_4BIN_S_NI
		port map( QA => \PLD1/bit8\, QB => \PLD1/bit9\, QC => \PLD1/bit10\, QD => \PLD1/bit11\, RCO => open, A => \3\, B => \3\, C => \3\, D => \3\, ENP => \3\, ENT => \4\, LOAD => \3\, CLR => \PLD1/reset\, CLK => \PLD1/Pixelclock\ );
	U1 : DIGITAL_HIGH_NI
		port map( Y => \3\ );
	U30 : CNTR_4BIN_S_NI
		port map( QA => \PLD3/bit0\, QB => \PLD3/bit1\, QC => \PLD3/bit2\, QD => \PLD3/bit3\, RCO => \20\, A => \25\, B => \25\, C => \25\, D => \25\, ENP => \25\, ENT => \25\, LOAD => \25\, CLR => \PLD3/reset\, CLK => \PLD3/Pixelclock\ );
	U31 : CNTR_4BIN_S_NI
		port map( QA => \PLD3/bit4\, QB => \PLD3/bit5\, QC => \PLD3/bit6\, QD => \PLD3/bit7\, RCO => \26\, A => \25\, B => \25\, C => \25\, D => \25\, ENP => \25\, ENT => \20\, LOAD => \25\, CLR => \PLD3/reset\, CLK => \PLD3/Pixelclock\ );
	U32 : CNTR_4BIN_S_NI
		port map( QA => \PLD3/bit8\, QB => \PLD3/bit9\, QC => \PLD3/bit10\, QD => \PLD3/bit11\, RCO => open, A => \25\, B => \25\, C => \25\, D => \25\, ENP => \25\, ENT => \26\, LOAD => \25\, CLR => \PLD3/reset\, CLK => \PLD3/Pixelclock\ );
	U33 : DIGITAL_HIGH_NI
		port map( Y => \25\ );
end behavioral;
