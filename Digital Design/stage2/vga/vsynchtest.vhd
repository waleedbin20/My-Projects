---------------------------------------------------
-- Sheet: vsynchtest
-- RefDes: 
-- Part Number: XC7A35T
-- Generated By: Multisim
--
-- Author: wa18382
-- Date: Thursday, November 28 14:18:19, 2019
---------------------------------------------------

---------------------------------------------------
-- Use: This file defines the top-level of the design
-- Use with the exported package file
---------------------------------------------------
library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;

library work;
use work.vsynchtest_pkg.ALL;


entity vsynchtest is
	port (

		CLK : in std_logic;
		JB0 : out std_logic;
		JB1 : out std_logic;
		JB2 : out std_logic
	);
end vsynchtest;


architecture behavioral of vsynchtest is


	component AND2_NI
		port (
    B : in STD_LOGIC := 'X';
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
	end component;

	component AND3_NI
		port (
    C : in STD_LOGIC := 'X';
    B : in STD_LOGIC := 'X';
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
	end component;

	component AND4_NI
		port (
    D : in STD_LOGIC := 'X';
    C : in STD_LOGIC := 'X';
    B : in STD_LOGIC := 'X';
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
	end component;

	component AUTO_IBUF
		port(
		I : in std_logic;
		O : out std_logic
	);
	end component;

	component AUTO_OBUF
		port(
		I : in std_logic;
		O : out std_logic
	);
	end component;

	component CNTR_4BIN_S_NI
		port( 
  LOAD: in STD_LOGIC;
  CLR: in STD_LOGIC;
  ENP: in STD_LOGIC; 
  ENT: in STD_LOGIC;
  CLK: in STD_LOGIC;
  A :in STD_LOGIC;
  B :in STD_LOGIC;
  C :in STD_LOGIC;
  D :in STD_LOGIC;
  RCO : out STD_LOGIC;
  QA : out STD_LOGIC;
  QB : out STD_LOGIC;
  QC : out STD_LOGIC;
  QD : out STD_LOGIC
 );
	end component;

	component DIGITAL_HIGH_NI
		Port ( 
  Y : out  STD_LOGIC:='1'
 );
	end component;

	component FF_JK_NSCLR_CO_NI
		port (
   J: in STD_LOGIC;
    K: in STD_LOGIC;
    CLK : in STD_LOGIC;  
    PR: in STD_LOGIC;
    CLR: in STD_LOGIC;
    Q : out STD_LOGIC;
    Qneg : out STD_LOGIC
  );
	end component;

	component INV_NI
		port (
    A : in STD_LOGIC := 'X';
    Y : out STD_LOGIC := 'U'
  );
	end component;
	signal \1\ : std_logic;
	signal \PLD1/Pixelclock\ : std_logic;
	signal \17\ : std_logic;
	signal \15\ : std_logic;
	signal \PLD1/bit9\ : std_logic;
	signal \PLD1/bit5\ : std_logic;
	signal \19\ : std_logic;
	signal \PLD1/bit2\ : std_logic;
	signal \22\ : std_logic;
	signal \PLD1/bit0\ : std_logic;
	signal \14\ : std_logic;
	signal \PLD1/bit1\ : std_logic;
	signal \PLD1/bit6\ : std_logic;
	signal \PLD1/bit3\ : std_logic;
	signal \24\ : std_logic;
	signal \PLD1/bit4\ : std_logic;
	signal \PLD1/bit7\ : std_logic;
	signal \PLD1/bit8\ : std_logic;
	signal \PLD1/bit11\ : std_logic;
	signal \21\ : std_logic;
	signal \PLD1/reset\ : std_logic;
	signal \PLD1/bit10\ : std_logic;
	signal \18\ : std_logic;
	signal \16\ : std_logic;
	signal \28\ : std_logic;
	signal \PLD6/Clock\ : std_logic;
	signal \2\ : std_logic;
	signal \13\ : std_logic;
	signal \3\ : std_logic;
	signal \27\ : std_logic;
	signal \26\ : std_logic;
	signal \25\ : std_logic;
	signal \30\ : std_logic;
	signal \20\ : std_logic;
	signal \31\ : std_logic;
	signal \35\ : std_logic;
	signal \36\ : std_logic;
	signal \37\ : std_logic;
	signal \38\ : std_logic;
	signal \39\ : std_logic;
	signal \40\ : std_logic;
	signal \41\ : std_logic;
	signal \42\ : std_logic;
	signal \43\ : std_logic;
	signal \PLD5/Pixelclock\ : std_logic;
	signal \PLD5/bit0\ : std_logic;
	signal \PLD5/bit1\ : std_logic;
	signal \PLD5/bit3\ : std_logic;
	signal \PLD5/bit2\ : std_logic;
	signal \PLD5/bit4\ : std_logic;
	signal \PLD5/bit6\ : std_logic;
	signal \PLD5/bit5\ : std_logic;
	signal \PLD5/bit7\ : std_logic;
	signal \PLD5/bit9\ : std_logic;
	signal \PLD5/bit8\ : std_logic;
	signal \PLD5/bit10\ : std_logic;
	signal \PLD5/bit11\ : std_logic;
	signal \PLD5/reset\ : std_logic;
	signal \32\ : std_logic;
	signal \33\ : std_logic;
	signal \34\ : std_logic;
begin
	CLK_AUTOBUF : AUTO_IBUF
		port map( I => CLK, O => \PLD6/Clock\ );
	JB0_AUTOBUF : AUTO_OBUF
		port map( I => \PLD1/reset\, O => JB0 );
	JB1_AUTOBUF : AUTO_OBUF
		port map( I => \27\, O => JB1 );
	JB2_AUTOBUF : AUTO_OBUF
		port map( I => \PLD1/Pixelclock\, O => JB2 );
	U14 : INV_NI
		port map( Y => \15\, A => \PLD1/bit0\ );
	U15 : INV_NI
		port map( Y => \14\, A => \PLD1/bit1\ );
	U19 : INV_NI
		port map( Y => \13\, A => \PLD1/bit2\ );
	U20 : AND4_NI
		port map( A => \15\, B => \14\, C => \PLD1/bit3\, D => \13\, Y => \24\ );
	U21 : INV_NI
		port map( Y => \17\, A => \PLD1/bit5\ );
	U22 : INV_NI
		port map( Y => \19\, A => \PLD1/bit7\ );
	U23 : INV_NI
		port map( Y => \20\, A => \PLD1/bit8\ );
	U24 : INV_NI
		port map( Y => \16\, A => \PLD1/bit4\ );
	U25 : INV_NI
		port map( Y => \18\, A => \PLD1/bit6\ );
	U26 : AND4_NI
		port map( A => \16\, B => \17\, C => \18\, D => \19\, Y => \21\ );
	U27 : AND2_NI
		port map( A => \PLD1/bit9\, B => \20\, Y => \22\ );
	U28 : AND3_NI
		port map( A => \24\, B => \21\, C => \22\, Y => \28\ );
	U29 : INV_NI
		port map( Y => \25\, A => \PLD1/bit0\ );
	U30 : AND2_NI
		port map( A => open, B => open, Y => open );
	U31 : AND2_NI
		port map( A => \25\, B => \PLD1/bit1\, Y => \26\ );
	U32 : INV_NI
		port map( Y => \27\, A => \26\ );
	U33 : INV_NI
		port map( Y => \PLD1/reset\, A => \28\ );
	U16 : CNTR_4BIN_S_NI
		port map( QA => \PLD1/bit0\, QB => \PLD1/bit1\, QC => \PLD1/bit2\, QD => \PLD1/bit3\, RCO => \1\, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \2\, LOAD => \2\, CLR => \PLD1/reset\, CLK => \PLD1/Pixelclock\ );
	U17 : CNTR_4BIN_S_NI
		port map( QA => \PLD1/bit4\, QB => \PLD1/bit5\, QC => \PLD1/bit6\, QD => \PLD1/bit7\, RCO => \3\, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \1\, LOAD => \2\, CLR => \PLD1/reset\, CLK => \PLD1/Pixelclock\ );
	U18 : CNTR_4BIN_S_NI
		port map( QA => \PLD1/bit8\, QB => \PLD1/bit9\, QC => \PLD1/bit10\, QD => \PLD1/bit11\, RCO => open, A => \2\, B => \2\, C => \2\, D => \2\, ENP => \2\, ENT => \3\, LOAD => \2\, CLR => \PLD1/reset\, CLK => \PLD1/Pixelclock\ );
	U1 : DIGITAL_HIGH_NI
		port map( Y => \2\ );
	U34 : AND4_NI
		port map( A => \PLD5/bit0\, B => \PLD5/bit1\, C => \PLD5/bit2\, D => \PLD5/bit3\, Y => \30\ );
	U35 : INV_NI
		port map( Y => \31\, A => \PLD5/bit5\ );
	U36 : INV_NI
		port map( Y => \35\, A => \PLD5/bit6\ );
	U37 : INV_NI
		port map( Y => \36\, A => \PLD5/bit7\ );
	U38 : AND4_NI
		port map( A => \PLD5/bit4\, B => \31\, C => \36\, D => \35\, Y => \37\ );
	U39 : AND4_NI
		port map( A => \30\, B => \37\, C => \PLD5/bit8\, D => \PLD5/bit9\, Y => \38\ );
	U40 : INV_NI
		port map( Y => \PLD5/reset\, A => \38\ );
	U41 : AND4_NI
		port map( A => \PLD5/bit0\, B => \PLD5/bit1\, C => \PLD5/bit2\, D => \PLD5/bit3\, Y => \39\ );
	U42 : INV_NI
		port map( Y => \40\, A => \PLD5/bit5\ );
	U43 : AND2_NI
		port map( A => \39\, B => \41\, Y => \42\ );
	U44 : AND3_NI
		port map( A => \PLD5/bit4\, B => \40\, C => \PLD5/bit6\, Y => \41\ );
	U45 : FF_JK_NSCLR_CO_NI
		port map( Q => \PLD1/Pixelclock\, Qneg => open, PR => \43\, K => \38\, CLR => \43\, J => \42\, CLK => \PLD5/Pixelclock\ );
	U46 : DIGITAL_HIGH_NI
		port map( Y => \43\ );
	U47 : CNTR_4BIN_S_NI
		port map( QA => \PLD5/bit0\, QB => \PLD5/bit1\, QC => \PLD5/bit2\, QD => \PLD5/bit3\, RCO => \32\, A => \33\, B => \33\, C => \33\, D => \33\, ENP => \33\, ENT => \33\, LOAD => \33\, CLR => \PLD5/reset\, CLK => \PLD5/Pixelclock\ );
	U48 : CNTR_4BIN_S_NI
		port map( QA => \PLD5/bit4\, QB => \PLD5/bit5\, QC => \PLD5/bit6\, QD => \PLD5/bit7\, RCO => \34\, A => \33\, B => \33\, C => \33\, D => \33\, ENP => \33\, ENT => \32\, LOAD => \33\, CLR => \PLD5/reset\, CLK => \PLD5/Pixelclock\ );
	U49 : CNTR_4BIN_S_NI
		port map( QA => \PLD5/bit8\, QB => \PLD5/bit9\, QC => \PLD5/bit10\, QD => \PLD5/bit11\, RCO => open, A => \33\, B => \33\, C => \33\, D => \33\, ENP => \33\, ENT => \34\, LOAD => \33\, CLR => \PLD5/reset\, CLK => \PLD5/Pixelclock\ );
	U50 : DIGITAL_HIGH_NI
		port map( Y => \33\ );
end behavioral;
